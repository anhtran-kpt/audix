
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  name: 'name',
  password: 'password',
  imageId: 'imageId',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bio: 'bio',
  country: 'country',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  autoRenew: 'autoRenew',
  paymentMethod: 'paymentMethod'
};

exports.Prisma.ArtistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  bio: 'bio',
  imageId: 'imageId',
  verified: 'verified',
  monthlyListeners: 'monthlyListeners',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlbumScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  imageId: 'imageId',
  albumType: 'albumType',
  releaseDate: 'releaseDate',
  totalTracks: 'totalTracks',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  artistId: 'artistId'
};

exports.Prisma.SongScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  audioId: 'audioId',
  duration: 'duration',
  trackNumber: 'trackNumber',
  lyrics: 'lyrics',
  isExplicit: 'isExplicit',
  playCount: 'playCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  albumId: 'albumId'
};

exports.Prisma.GenreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color'
};

exports.Prisma.SongArtistScalarFieldEnum = {
  id: 'id',
  songId: 'songId',
  artistId: 'artistId',
  role: 'role',
  order: 'order'
};

exports.Prisma.SongCreditScalarFieldEnum = {
  id: 'id',
  songId: 'songId',
  artistId: 'artistId',
  name: 'name',
  role: 'role',
  details: 'details',
  order: 'order'
};

exports.Prisma.SongGenreScalarFieldEnum = {
  songId: 'songId',
  genreId: 'genreId'
};

exports.Prisma.AlbumGenreScalarFieldEnum = {
  albumId: 'albumId',
  genreId: 'genreId'
};

exports.Prisma.ArtistGenreScalarFieldEnum = {
  artistId: 'artistId',
  genreId: 'genreId'
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageId: 'imageId',
  isPublic: 'isPublic',
  isOfficial: 'isOfficial',
  totalTracks: 'totalTracks',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PlaylistItemScalarFieldEnum = {
  id: 'id',
  position: 'position',
  addedAt: 'addedAt',
  playlistId: 'playlistId',
  songId: 'songId'
};

exports.Prisma.UserLikedSongScalarFieldEnum = {
  userId: 'userId',
  songId: 'songId',
  likedAt: 'likedAt'
};

exports.Prisma.UserLikedAlbumScalarFieldEnum = {
  userId: 'userId',
  albumId: 'albumId',
  likedAt: 'likedAt'
};

exports.Prisma.UserLikedArtistScalarFieldEnum = {
  userId: 'userId',
  artistId: 'artistId',
  likedAt: 'likedAt'
};

exports.Prisma.UserLikedPlaylistScalarFieldEnum = {
  userId: 'userId',
  playlistId: 'playlistId',
  likedAt: 'likedAt'
};

exports.Prisma.UserFollowScalarFieldEnum = {
  followerId: 'followerId',
  followingId: 'followingId',
  followedAt: 'followedAt'
};

exports.Prisma.PlayHistoryScalarFieldEnum = {
  id: 'id',
  playedAt: 'playedAt',
  duration: 'duration',
  deviceType: 'deviceType',
  userId: 'userId',
  songId: 'songId'
};

exports.Prisma.SearchHistoryScalarFieldEnum = {
  id: 'id',
  query: 'query',
  resultType: 'resultType',
  resultId: 'resultId',
  searchedAt: 'searchedAt',
  userId: 'userId'
};

exports.Prisma.UserRecommendationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  targetId: 'targetId',
  score: 'score',
  reason: 'reason',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.UserQueueScalarFieldEnum = {
  id: 'id',
  position: 'position',
  createdAt: 'createdAt',
  userId: 'userId',
  songId: 'songId'
};

exports.Prisma.ChartScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  period: 'period',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt'
};

exports.Prisma.ChartItemScalarFieldEnum = {
  chartId: 'chartId',
  position: 'position',
  itemType: 'itemType',
  itemId: 'itemId',
  plays: 'plays'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.SubscriptionType = exports.$Enums.SubscriptionType = {
  FREE: 'FREE',
  PREMIUM: 'PREMIUM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED'
};

exports.AlbumType = exports.$Enums.AlbumType = {
  SINGLE: 'SINGLE',
  EP: 'EP',
  ALBUM: 'ALBUM',
  COMPILATION: 'COMPILATION'
};

exports.ArtistRole = exports.$Enums.ArtistRole = {
  MAIN_ARTIST: 'MAIN_ARTIST',
  FEATURED_ARTIST: 'FEATURED_ARTIST',
  REMIX_ARTIST: 'REMIX_ARTIST'
};

exports.CreditRole = exports.$Enums.CreditRole = {
  LEAD_VOCALS: 'LEAD_VOCALS',
  BACKING_VOCALS: 'BACKING_VOCALS',
  RAP: 'RAP',
  FEATURED_ARTIST: 'FEATURED_ARTIST',
  SONGWRITER: 'SONGWRITER',
  COMPOSER: 'COMPOSER',
  LYRICIST: 'LYRICIST',
  PRODUCER: 'PRODUCER',
  EXECUTIVE_PRODUCER: 'EXECUTIVE_PRODUCER',
  CO_PRODUCER: 'CO_PRODUCER',
  VOCAL_PRODUCER: 'VOCAL_PRODUCER',
  MIXING_ENGINEER: 'MIXING_ENGINEER',
  MASTERING_ENGINEER: 'MASTERING_ENGINEER',
  RECORDING_ENGINEER: 'RECORDING_ENGINEER',
  ASSISTANT_ENGINEER: 'ASSISTANT_ENGINEER',
  GUITAR: 'GUITAR',
  BASS: 'BASS',
  DRUMS: 'DRUMS',
  PIANO: 'PIANO',
  KEYBOARD: 'KEYBOARD',
  VIOLIN: 'VIOLIN',
  SAXOPHONE: 'SAXOPHONE',
  TRUMPET: 'TRUMPET',
  OTHER_INSTRUMENT: 'OTHER_INSTRUMENT',
  ARRANGER: 'ARRANGER',
  CONDUCTOR: 'CONDUCTOR',
  PROGRAMMER: 'PROGRAMMER',
  ADDITIONAL_PRODUCTION: 'ADDITIONAL_PRODUCTION',
  REMIXER: 'REMIXER',
  PUBLISHER: 'PUBLISHER',
  RECORD_LABEL: 'RECORD_LABEL',
  MANAGEMENT: 'MANAGEMENT'
};

exports.ChartType = exports.$Enums.ChartType = {
  TOP_SONGS: 'TOP_SONGS',
  TOP_ALBUMS: 'TOP_ALBUMS',
  TOP_ARTISTS: 'TOP_ARTISTS',
  TRENDING: 'TRENDING'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  UserSubscription: 'UserSubscription',
  Artist: 'Artist',
  Album: 'Album',
  Song: 'Song',
  Genre: 'Genre',
  SongArtist: 'SongArtist',
  SongCredit: 'SongCredit',
  SongGenre: 'SongGenre',
  AlbumGenre: 'AlbumGenre',
  ArtistGenre: 'ArtistGenre',
  Playlist: 'Playlist',
  PlaylistItem: 'PlaylistItem',
  UserLikedSong: 'UserLikedSong',
  UserLikedAlbum: 'UserLikedAlbum',
  UserLikedArtist: 'UserLikedArtist',
  UserLikedPlaylist: 'UserLikedPlaylist',
  UserFollow: 'UserFollow',
  PlayHistory: 'PlayHistory',
  SearchHistory: 'SearchHistory',
  UserRecommendation: 'UserRecommendation',
  UserQueue: 'UserQueue',
  Chart: 'Chart',
  ChartItem: 'ChartItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
